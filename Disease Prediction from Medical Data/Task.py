# -*- coding: utf-8 -*-
"""

Automatically generated by Colab.


"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from google.colab import drive

# Mount Google Drive to access dataset
drive.mount('/content/drive')

# Define dataset path
dataset_path = "/content/drive/My Drive/Datasets/heart.csv"

# Load the CSV data into a Pandas DataFrame
heart_data = pd.read_csv(dataset_path)

# Display the first five rows of the dataset
print(heart_data.head())

# Print dataset shape (rows, columns)
print("Dataset Shape:", heart_data.shape)

# Display dataset information
heart_data.info()

# Check for missing values in each column
print("Missing Values in Each Column:\n", heart_data.isnull().sum())

# Get summary statistics of the dataset
print(heart_data.describe())

# Check the distribution of the target variable
print("Target Variable Distribution:\n", heart_data['target'].value_counts())

# Separate features (X) and target variable (Y)
X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

# Split the dataset into training (80%) and testing (20%) sets with stratification
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

# Initialize the Logistic Regression model with increased max_iter to prevent convergence warning
model = LogisticRegression(max_iter=2000, solver='liblinear')

# Train the model on the training data
model.fit(X_train, Y_train)

# Predict on the training data
X_train_prediction = model.predict(X_train)

# Calculate accuracy on training data
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training Data:', training_data_accuracy)

# Predict on the test data
X_test_prediction = model.predict(X_test)

# Calculate accuracy on test data
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy on Test Data:', test_data_accuracy)

# Define a sample input for prediction
input_data = np.array([[62, 0, 0, 140, 268, 0, 0, 160, 0, 3.6, 0, 2, 2]])

# Convert input_data to DataFrame with valid feature names
input_df = pd.DataFrame(input_data, columns=X.columns)

# Ensure the input data has the same number of features as training data
if input_df.shape[1] != X.shape[1]:
    raise ValueError("Input data does not match the number of features used for training.")

# Make a prediction using the trained model
prediction = model.predict(input_df)

# Display prediction result
if prediction[0] == 0:
    print('The Person does NOT have Heart Disease')
else:
    print('The Person HAS Heart Disease')

